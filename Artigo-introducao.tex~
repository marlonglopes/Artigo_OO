\subsection{O que é um padrão de design (\emph{Design Pattern})}
\label{sub:introducao}

Cada padrão descreve um problema que ocorre ao longo do tempo
mais de uma vez em nosso meio, e então descreve o núcleo da solução
para esse problema, de tal forma que você pode usar esta solução um milhão de vezes
mais, sem nunca fazê-lo da mesma forma duas vezes. 
Mesmo falando em padrões de construção de edifícios, o que ele se diz também é verdade para padrões de construção de software orientado a objeto. Nossas soluções são expressas em termos de objetos e interfaces em vez de paredes e portas, mas no cerne dos dois tipos de padrões existe uma solução para um problema em um contexto.\cite{gamma95}

Em geral, um padrão tem quatro elementos essenciais:

\begin{enumerate}
	\item 

O \textbf{nome do padrão} é um identificador que podemos usar para descrever um problema de \emph{design}, suas
soluções, e suas consequências em uma ou duas palavras. A nomeação de um padrão imediatamente
aumenta o nosso vocabulário de design. Ela nos permite projetar em um nível mais elevado de
abstração. Ter um vocabulário de padrões permite-nos falar sobre eles com
nossos colegas, em nossa documentação, e até mesmo para nós mesmos. Torna-se
mais fácil pensar sobre os projetos e comunicá-las para os outros. Encontrar bons nomes tem sido uma das partes mais difíceis de desenvolver nosso catálogo.\cite{gamma95}

	\item 


O \textbf{problema} descreve quando aplicar o padrão. Ele explica o problema
e seu contexto. Poderia descrever os problemas específicos de design tais como
como representar algoritmos como objetos. Poderia descrever classe ou
estruturas de objeto que são sintomáticas de um projeto inflexível. Às vezes, a
problema irá incluir uma lista de condições que devem ser cumpridas antes que faça
sentido de aplicar o padrão.


	\item 


A \textbf{solução} descreve os elementos que compõem o projeto, suas
relações, responsabilidades e colaborações. A solução não
descreve um determinado design concreto ou de execução, porque um padrão
é como um modelo que pode ser aplicado em muitas situações diferentes. Em vez disso,
o padrão fornece uma descrição abstrata de um problema de projeto e como
um regime geral de elementos (classes e objetos no nosso caso) resolve
ele.

	\item 


As \textbf{consequências} são os resultados da aplicação do modelo.
Quando descrevemos as decisões de design, eles são críticos para avaliar alternativas de projeto e para a compreensão
dos custos e benefícios da aplicação do modelo. As consequências para o
software são preocupação com freqüência e tempo de execução. Podem sinalizar linguagem
e questões de implementação. Uma vez que a reutilização é frequentemente um fator de
\emph{design} orientado a objeto, as conseqüências de um padrão inclui o seu impacto
sobre a flexibilidade de um sistema, extensibilidade ou portabilidade. Listando estas
conseqüências explicitamente ajuda você a compreender e avaliá-los.


\end{enumerate}

\subsection{\emph{Design Patterns} existentes}
\label{sub:designexistentes}


Os padrões hoje existentes estão divididos em três grupos:

\begin{itemize}
	\item
		Padrões de criação (\emph{Creational patterns}) \\

		\begin{itemize}
			\item 
				\emph{Abstract} factory, Fornece uma interface para criar famílias de objetos relacionados ou dependentes sem especificar suas classes concretas.\\

			\item 
				\emph{Builder}, Separa a construção de um objeto complexo da sua representação para que
o mesmo processo de construção possa criar diferentes representações.\\
			\item 
				\emph{Factory method}, Define uma interface para criar um objeto, mas deixa as subclasses decidirem qual classe instanciar. \emph{Factory Method} permite subclasses façam a instanciação.\\

			\item 
				\emph{Prototype}, Especifica o tipo de objectos a criar usando uma instância de protótipo, e cria
novos objetos copiando este protótipo.\\

			\item 
				\emph{Singleton}, Certifica-se de que uma classe tem apenas um exemplo, e fornece um ponto global de acesso à ele.\\

		\end{itemize}

	\item
		Padrões estruturais (\emph{Structural patterns})\\
		
		\begin{itemize}
			\item \emph{Adapter}, Converte a interface de uma classe para outra interface que os clientes esperam. Este adaptador permite que classes trabalhem em conjunto, de outro modo não seria possivel por causa da incompatibilidade
interfaces.  \\
			\item \emph{Bridge}, Desacopla uma abstração de sua implementação para que as duas possam variar
de forma independente.\\

			\item \emph{Composite}, Tem o objetivo de compor objetos em estruturas de árvore para representar hierarquias parte-todo. \emph{Composite} permite que clientes tratem objetos individuais e composições de objetos
uniformemente.\\

			\item
				\emph{Decorator}, Anexa responsabilidades adicionais a um objeto dinamicamente. \emph{Decorators} fornecem uma alternativa flexível a subclasses para extensão da funcionalidade.\\

			\item \emph{Facade}, Fornece uma interface unificada para um conjunto de interfaces em um subsistema. \emph{Facade} define uma interface de alto nível que torna o subsistema mais fácil de usar.\\

			\item \emph{Flyweight}, Usa compartilhamento para suportar um grande número de objetos de forma eficiente.\\

			\item \emph{Proxy}, Proporciona um espaço para outro objeto para controlar o acesso a ele.\\


		\end{itemize}

	\item
		Padrões comportamentais (\emph{Behavioral patterns})\\

		\begin{itemize}
			\item \emph{Chain of Responsibility}, Evita o acoplamento do remetente de um pedido de seu receptor, dando a mais de um objeto a oportunidade para manipular a solicitação. Faz com que a cadeia os objetos e passe a receber pedido até que um objeto gere.\\

			\item \emph{Command}, Encapsula uma solicitação como um objeto, assim permitindo parametrizar clientes com
diferentes pedidos, cria fila ou solicitações de log e suporte às operações reversível.\\

			\item \emph{Interpreter}, Dada uma linguagem, define uma representação para sua gramática juntamente com um intérprete que usa a representação para interpretar sentenças na linguagem.\\

			\item \emph{Iterator}, Fornece uma maneira de acessar os elementos de um objeto agregado seqüencialmente sem expor sua representação subjacente.\\

			\item \emph{Mediator}, Define um objeto que encapsula como um conjunto de objetos \emph{interact.Mediator} promove acoplamento, mantendo os objetos de cada EPI referindo explicitamente outros, e ele permite que você varie sua interação de forma independente.\\


			\item \emph{Memento}, Sem violar o encapsulamento, captura e externaliza o estado de um \emph{object sinternal} para que o objeto pode ser restaurado para este estado mais tarde. \\

			\item \emph{Observer}, Define uma dependência um-para-muitos entre objetos de modo que quando um objeto muda de estado, todos seus dependentes sejam notificados e atualizados automaticamente.\\

			\item \emph{State}, Permite que um objeto altere seu comportamento quando seu estado interno muda.\\
			
			\item \emph{Strategy}, Define uma família de algoritmos, encapsula cada um, e torna-os intercambiáveis.
Esta estratégia permite que o algoritmo pode variar independentemente do cliente que usá-lo.\\


			\item \emph{Template Method}, Define o esqueleto de um algoritmo numa operação, adiando alguns passos para as subclasses. Permite que subclasses redefinam certos passos de um algoritmo sem alterar a estrutura do algoritmo.\\

			\item \emph{Visitor}, Representa uma operação a ser realizada sobre os elementos de uma estrutura de objetos. Permite que você defina uma nova operação sem alterar as classes dos elementos em que opera.\\



		\end{itemize}

\end{itemize}

Estes são os padrões mais comumente utilizados, neste trabalho será detalhado o Padrão de criação \emph{Factory Method}, tambem conhecido como \emph{Virtual Constructor} (Construtor virtual).
